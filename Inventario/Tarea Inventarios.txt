Tecnologico de Costa Rica, Escuela de Computacion, Ingenieria en Computacion
Curso de Simulacion, I Semestre 2021
Tarea de simulación de inventarios
Joseph Tenorio Pereira (2019064588) y Alejandro Garcia Bejarano (2019380047) 

A continuación se presenta un estudio de un sistema de inventarios, para el cual es necesario identificar dos variables primordiales. La cantidad de la orden denotada por "q" y el punto de reorden denotado por "r". Primeramente, a 
continuación se presentan los resultados obtenidos y los parámetros usados para estos:

-Resultado de costos para q = 50 y r = 20:

costoFijo: 10000.0
costoInv: 182820.0
costoPen: 3000.0
costoTotal: 195820.0

-Busqueda de q y r optimos con 10 ≤ q ≤ 100 y 10 ≤ r ≤ q:

q\r	    10          20          30          40          50          60          70          80          90          100         
100         312567.92   369089      438497.49   511710.17   585301.44   656155.28   727803.74   799527.68   871794.42   943542.9    
90          279432.3    333891.07   402862.48   475933.73   549713.44   620308.16   691855.54   763954.6    836202.62   
80          246871.22   298803.33   367527.57   440269.89   512971.26   584591.86   656064.76   728502.82   
70          215290.48   263959.31   331838.09   405085.77   476754.8    549199.08   620863.9    
60          185198.89   230201.1    296793.43   369020.45   442078.14   514411.66   
50          157424.95   197174.01   262494.6    334942.97   407374.22   
40          134098.25   165578.16   229117.32   300979.83   
30          121352.6    135531.63   194051.76   
20          1365062.96  1232654.38  
10          11817621.58 

-Valores optimos de q y r:

q = 30
r = 10

Para los resultados de costos de la corrida con q = 50 y r = 20, se simuló el funcionamiento del inventario por 365 dias, con un costo fijo por orden de 100, costo de penalizacion de 50 y costo por unidad en el inventario de 20. Ademas,
se tiene que la cantidad de pedidos de un dia es dada por una distribucion de Poisson con un lambda de 7.

Ademas de los parametros anteriores, para encontrar el q y r optimos se hizo la simulacion de 365 dias de inventario unas 1000 veces para cada combinacion de posibles valores mostrada. Posteriormente se promedió el costo total de esas
mil corridas y dicho promedio es el presentado en la tabla anterior.

Finalmente, se adjunta el código fuente de las simulaciones:

/*------------------------------------------------------------Codigo Fuente de la simulación-----------------------------------------------------------*/

/* LIMPIEZA DE CONSOLA */

CLEAROUTPUT

/* SUBRUTINAS */

'Subrutina que utiliza una distribucion de Poisson para simular los pedidos de un dia
NEWCMD getCantidadPedidos pedidos
	POISSON 1 7 pedidos
END

'Subrutina que simula el paso de un dia de ventas sobre el inventarios
NEWCMD laborarDia cantidadUnidadesInventarioI hayPedido diasEntrega cantidadPorOrdenar _hayPedido _diasEntrega _cantidadPedidos _cantidadUnidadesInventarioF
	/* Generar Pedidos */
	getCantidadPedidos pedidos
	_cantidadPedidos = pedidos

	/* Asignacion de variables */
	_cantidadUnidadesInventarioI = cantidadUnidadesInventarioI
	_cantidadUnidadesInventarioF = cantidadUnidadesInventarioI
	_hayPedido = hayPedido

	/* Revisar si se necesita hacer re-fill */
	IF diasEntrega > 1 
		_diasEntrega = diasEntrega - 1 
	ELSE
		IF diasEntrega = 1
			 _diasEntrega = diasEntrega - 1 
			 _cantidadUnidadesInventarioF = _cantidadUnidadesInventarioF + cantidadPorOrdenar
			 _hayPedido = 0
		ELSE
			_diasEntrega = diasEntrega
		END
	END
	
	/* Substraer los pedidos entegados del dia */
	_cantidadUnidadesInventarioF = _cantidadUnidadesInventarioF - _cantidadPedidos
END

'Subrutina que utiliza una distribucion uniforme para generar los dias de tardanza de una entrega
NEWCMD generarDiasEntrega resultado
	UNIFORM 1 0 1 random
	resultado = 0
	IF random <= 0.3 
		resultado = 1
	END
	IF 0.3 < random AND random <= 0.7
		resultado = 2
	END
	IF 0.7 <= random
		resultado = 3
	END
END

'Subrutina que simula el funcionamiento del inventario con ciertos parametros q y r durante cierta cantidad de dias (corridas)
NEWCMD simularLabor corridas cantidadUnidadesInventarioIniciales cantidadPorOrdenar puntoDeReorden No ini q t x fin
	
	/* Estados Iniciales */
	hayPedido = 0
	diasEntrega = 0
	cantidadPedidos = 0
	corridasSimulacion = 0
	pedirEntrega = 0
	cantidadFinalDelDia = cantidadUnidadesInventarioIniciales
	cantidadInicioDelDia = cantidadUnidadesInventarioIniciales
	
	/* Mostrar Resultados */
	No = ()
	ini = ()
	q = ()
	T = ()
	x = ()
	fin = ()

	/* Inicio de Simulacion */
	WHILE corridasSimulacion < corridas 

		cantidadInicioDelDia = cantidadFinalDelDia
		
		laborarDia cantidadInicioDelDia hayPedido diasEntrega cantidadPorOrdenar _hayPedido _diasEntrega _cantidadPedidos _cantidadUnidadesInventarioF
		
		/* Actualizar datos de dia laborado */
		cantidadFinalDelDia = _cantidadUnidadesInventarioF 
		hayPedido = _hayPedido
		diasEntrega = _diasEntrega
		cantidadPedidos = _cantidadPedidos

		/* Pedir Unidades */
		IF pedirEntrega = 1
			pedirEntrega = 0
			generarDiasEntrega resultadoDias
			diasEntrega = resultadoDias
			hayPedido = 1
		END

		/* Pedir Unidades */
		IF hayPedido = 0 AND cantidadFinalDelDia <= puntoDeReorden AND pedirEntrega = 0
			pedirEntrega = 1
		END

		CONCAT No corridasSimulacion No
		CONCAT ini cantidadInicioDelDia ini
		CONCAT q hayPedido q
		CONCAT t diasEntrega t
		CONCAT x cantidadPedidos x
		CONCAT fin cantidadFinalDelDia fin

		corridasSimulacion = corridasSimulacion + 1
	END
END 

'Subrutina que calcula los distintos costos para una simulacion del inventario
NEWCMD calcularCostos precioOrden precioInv precioPen q fin _costoFijo _costoInv _costoPen _costoTotal
	
	/*Calculo del costo fijo*/
	SUM q _costoFijo
	_costoFijo = precioOrden * _costoFijo
	
	/*Calculo del costo de inventario y penalizacion*/
	_costoInv = 0
	_costoPen = 0
	FOREACH cantidad fin
		IF cantidad < 0
			ABS cantidad cantidad
			_costoPen = _costoPen + cantidad
		ELSE
			_costoInv = _costoInv + cantidad
		END  
	END
	_costoPen = _costoPen * precioPen
	_costoInv = _costoInv * precioInv

	/*Calculo del costo total*/
	_costoTotal = _costoPen + _costoInv + _costoFijo
END

'Subrutina que realiza la busqueda de q y r optimos con 10 ≤ q ≤ 100 y 10 ≤ r ≤ q
NEWCMD simularInventarios corridas dias cantidadUnidadesInventarioIniciales precioOrden preioInv precioPen
	/*Inicializacion de matriz de resultados*/
	NEWARRAY resultados 10 10

	/*Pruebas con 10 ≤ q ≤ 100 y 10 ≤ r ≤ q*/
	COPY 1,10 cantidadPorOrdenar
	FOREACH contQ cantidadPorOrdenar
		COPY 1,contQ puntoReorden
		FOREACH contR puntoReorden
			/*Realiza corridas de funcionamiento de inventario durante 365 dias con los q y r del contador de indices, multiplicados por 10*/
			qReal = contQ * 10
			rReal = contR * 10
			totalAcumulado = 0
			REPEAT corridas
				simularLabor dias cantidadUnidadesInventarioIniciales qReal rReal No ini q t x fin
				calcularCostos 100 20 50 q fin costoFijo costoInv costoPen costoTotal
				totalAcumulado = totalAcumulado + costoTotal
			END
			/*Se promedian los resultados de las corridas y se guardan el costo total resultante*/
			resultados [contQ][contR] = totalAcumulado / corridas
		END
	END
	/*Inicializacion de varuiables para calculos de valores optimos de q y r*/
	minimo = resultados[1][1]
	qOptimo = ()
	rOptimo = ()
	
	/*Impresion en consola de matriz de resultados*/
	PRINT ">>Busqueda de q y r optimos con 10 ≤ q ≤ 100 y 10 ≤ r ≤ q:\n"
	OUTPUT "q\\r\t    "
	FOREACH indexColumna 1,10
		columnaReal = indexColumna * 10
		OUTPUT "%12.4F" columnaReal
	END
	OUTPUT "\n"
	FOREACH fila 10,1
		qReal = fila * 10
		OUTPUT "%12.4F" qReal
		FOREACH columna 1,fila
			OUTPUT "%12.4F" resultados[fila][columna]
			/*Calculo de variables de q y r con el minimo costo total*/
			IF resultados[fila][columna] < minimo
				minimo = resultados[fila][columna]
				qOptimo = fila * 10
				rOptimo = columna * 10
			END
 		END
		PRINT ""
	END
	/*Impresion de valores optimos de q y r*/
	PRINT "\n>>Valores optimos de q y r:\n"
	OUTPUT "q = %3.4F\nr = %3.4F" qOptimo rOptimo
END


/* PROGRAMA PRINCIPAL */

/*Calculo de costos para q = 50 y r = 20*/
simularLabor 365 50 50 20 No ini q t x fin
calcularCostos 100 20 50 q fin costoFijo costoInv costoPen costoTotal
PRINT ">>Resultado de costos para q = 50 y r = 20:\n"
PRINT costoFijo
PRINT costoInv
PRINT costoPen
PRINT costoTotal
PRINT ""

/*Calculo de valores optimos de q y r para 10 ≤ q ≤ 100 y 10 ≤ r ≤ q*/
simularInventarios 1000 365 50 100 20 50
